<div class="matches-wrapper">
    {{#if usersData}}
    {{#each usersData}}
    <article class="card card--horizontal card--{{this.gender}}" data-id="{{this.id}}" data-gender="{{this.gender}}">
        <div class="card__img-holder">
            <div class="card__img-wrapper">
                <a href="/profile/{{this.id}}">
                    {{#unless this.avatar}}
                    <div class="no-avatar">
                        <span>{{ this.initials }}</span>
                    </div>
                    {{/unless}}
                    {{#if this.avatar}}
                    <div>
                        <img class="card__img" src="{{ this.avatar }}" width="72" alt="">
                    </div>
                    {{/if}}
                </a>
            </div>
        </div>
        <div class="card__info">
            <h2 class="card__info__title">
                <a href="/profile/{{this.id}}">{{ this.fullname }}</a>
            </h2>
            <div class="tag-wrapper">
                {{#each this.favoriteGenres}}
                <span class="tag tag--small">{{ this.name }}</span>
                {{/each}}
            </div>
        </div>
        <div class="card__status">
            <span class="badge badge--music">
                <i class="icon icon-music"></i>
            </span>
        </div>
    </article>
    {{/each}}
    {{/if}}
</div>

<div id='map'></div>
<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiaWduYWNpb2diMTk5MCIsImEiOiJjazc3dHp2OGQwOW41M2VwZDZqcGlheGFyIn0.4aizFUZI7lq90KhxZfvUBw';

    const usersDataJSON = {{{ usersDataJSON }}};
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/dark-v10',
        zoom: 12,
        center: [-3.6851124, 40.4456899]
    });

    map.scrollZoom.disable();

    let size = 52;
    let pulsingDot = {
        width: size,
        height: size,
        data: new Uint8Array(size * size * 4),

        // get rendering context for the map canvas when layer is added to the map
        onAdd: function () {
            let canvas = document.createElement('canvas');
            canvas.width = this.width;
            canvas.height = this.height;
            this.context = canvas.getContext('2d');
        },

        // called once before every frame where the icon will be used
        render: function () {
            let duration = 1500;
            let t = (performance.now() % duration) / duration;

            let radius = (size / 2) * 0.3;
            let outerRadius = (size / 2) * 0.7 * t + radius;
            let context = this.context;

            // draw outer circle
            context.clearRect(0, 0, this.width, this.height);
            context.beginPath();
            context.arc(
                this.width / 2,
                this.height / 2,
                outerRadius,
                0,
                Math.PI * 2
            );
            context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';
            context.fill();

            context.beginPath();
            context.arc(
                this.width / 2,
                this.height / 2,
                radius,
                0,
                Math.PI * 2
            );
            context.fillStyle = 'rgba(255, 100, 100, 1)';
            context.strokeStyle = 'rgba(255, 100, 100, 1)';
            context.lineWidth = 2 + 4 * (1 - t);
            context.fill();
            context.stroke();

            this.data = context.getImageData(
                0,
                0,
                this.width,
                this.height
            ).data;
            map.triggerRepaint();

            return true;
        }
    };

    map.on('load', function () {
        map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });
        map.addSource('points', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': usersDataJSON.map(data => {
                    return {
                        'type': 'Feature',
                        'properties': {
                            'description': `<div class="card card--map-bubble card--${data.gender}">
                                <div class="card__img-wrapper">
                                    <div>
                                        <img class="card__img" src="${data.avatar}" width="150" alt="">
                                    </div>
                                </div>
                            </div>`
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': data.coordinates
                        }
                    }
                })
            }
        });
        map.addLayer({
            'id': 'points',
            'type': 'symbol',
            'source': 'points',
            'layout': {
                'icon-image': 'pulsing-dot',
                'icon-allow-overlap': true
            }
        });
    });

    map.on('click', 'points', function (e) {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;

        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description)
            .addTo(map);
    });

    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'points', function () {
        map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'points', function () {
        map.getCanvas().style.cursor = '';
    });

</script>